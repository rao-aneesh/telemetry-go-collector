//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: ipv4_rib_edm_route_734.proto

package telemetry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ipv4RibEdmRoute_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfName        string `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName         string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName        string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	RouteTableName string `protobuf:"bytes,4,opt,name=route_table_name,json=routeTableName,proto3" json:"route_table_name,omitempty"`
	Address        string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLength   uint32 `protobuf:"varint,6,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Ipv4RibEdmRoute_KEYS) Reset() {
	*x = Ipv4RibEdmRoute_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4RibEdmRoute_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4RibEdmRoute_KEYS) ProtoMessage() {}

func (x *Ipv4RibEdmRoute_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4RibEdmRoute_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv4RibEdmRoute_KEYS) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv4RibEdmRoute_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ipv4RibEdmRoute_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *Ipv4RibEdmRoute_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *Ipv4RibEdmRoute_KEYS) GetRouteTableName() string {
	if x != nil {
		return x.RouteTableName
	}
	return ""
}

func (x *Ipv4RibEdmRoute_KEYS) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv4RibEdmRoute_KEYS) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type RibEdmAlgoLabelSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgorithmId uint32 `protobuf:"varint,1,opt,name=algorithm_id,json=algorithmId,proto3" json:"algorithm_id,omitempty"`
	Label       uint32 `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
	Metric      uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *RibEdmAlgoLabelSet) Reset() {
	*x = RibEdmAlgoLabelSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmAlgoLabelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmAlgoLabelSet) ProtoMessage() {}

func (x *RibEdmAlgoLabelSet) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmAlgoLabelSet.ProtoReflect.Descriptor instead.
func (*RibEdmAlgoLabelSet) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{1}
}

func (x *RibEdmAlgoLabelSet) GetAlgorithmId() uint32 {
	if x != nil {
		return x.AlgorithmId
	}
	return 0
}

func (x *RibEdmAlgoLabelSet) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *RibEdmAlgoLabelSet) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

type MgmtSrv6EndpointBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MgmtSrv6EndpointBehavior) Reset() {
	*x = MgmtSrv6EndpointBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtSrv6EndpointBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtSrv6EndpointBehavior) ProtoMessage() {}

func (x *MgmtSrv6EndpointBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtSrv6EndpointBehavior.ProtoReflect.Descriptor instead.
func (*MgmtSrv6EndpointBehavior) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{2}
}

func (x *MgmtSrv6EndpointBehavior) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MgmtSrv6EndpointBehavior) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MgmtSrv6SidFmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MgmtSrv6SidFmt) Reset() {
	*x = MgmtSrv6SidFmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtSrv6SidFmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtSrv6SidFmt) ProtoMessage() {}

func (x *MgmtSrv6SidFmt) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtSrv6SidFmt.ProtoReflect.Descriptor instead.
func (*MgmtSrv6SidFmt) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{3}
}

func (x *MgmtSrv6SidFmt) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MgmtSrv6SidFmt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RibEdmRouteSrv6Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSRv6Endpoint       bool                      `protobuf:"varint,1,opt,name=is_s_rv6_endpoint,json=isSRv6Endpoint,proto3" json:"is_s_rv6_endpoint,omitempty"`
	SRv6EndpointBehavior *MgmtSrv6EndpointBehavior `protobuf:"bytes,2,opt,name=s_rv6_endpoint_behavior,json=sRv6EndpointBehavior,proto3" json:"s_rv6_endpoint_behavior,omitempty"`
	SRv6Format           *MgmtSrv6SidFmt           `protobuf:"bytes,3,opt,name=s_rv6_format,json=sRv6Format,proto3" json:"s_rv6_format,omitempty"`
	IsSRv6Locator        bool                      `protobuf:"varint,4,opt,name=is_s_rv6_locator,json=isSRv6Locator,proto3" json:"is_s_rv6_locator,omitempty"`
	SRv6LocatorAlgo      uint32                    `protobuf:"varint,5,opt,name=s_rv6_locator_algo,json=sRv6LocatorAlgo,proto3" json:"s_rv6_locator_algo,omitempty"`
}

func (x *RibEdmRouteSrv6Info) Reset() {
	*x = RibEdmRouteSrv6Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmRouteSrv6Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmRouteSrv6Info) ProtoMessage() {}

func (x *RibEdmRouteSrv6Info) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmRouteSrv6Info.ProtoReflect.Descriptor instead.
func (*RibEdmRouteSrv6Info) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{4}
}

func (x *RibEdmRouteSrv6Info) GetIsSRv6Endpoint() bool {
	if x != nil {
		return x.IsSRv6Endpoint
	}
	return false
}

func (x *RibEdmRouteSrv6Info) GetSRv6EndpointBehavior() *MgmtSrv6EndpointBehavior {
	if x != nil {
		return x.SRv6EndpointBehavior
	}
	return nil
}

func (x *RibEdmRouteSrv6Info) GetSRv6Format() *MgmtSrv6SidFmt {
	if x != nil {
		return x.SRv6Format
	}
	return nil
}

func (x *RibEdmRouteSrv6Info) GetIsSRv6Locator() bool {
	if x != nil {
		return x.IsSRv6Locator
	}
	return false
}

func (x *RibEdmRouteSrv6Info) GetSRv6LocatorAlgo() uint32 {
	if x != nil {
		return x.SRv6LocatorAlgo
	}
	return 0
}

type RibEdmNnh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	UnknownVal     uint32 `protobuf:"varint,2,opt,name=unknown_val,json=unknownVal,proto3" json:"unknown_val,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	InterfaceIndex uint32 `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
}

func (x *RibEdmNnh) Reset() {
	*x = RibEdmNnh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmNnh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmNnh) ProtoMessage() {}

func (x *RibEdmNnh) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmNnh.ProtoReflect.Descriptor instead.
func (*RibEdmNnh) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{5}
}

func (x *RibEdmNnh) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RibEdmNnh) GetUnknownVal() uint32 {
	if x != nil {
		return x.UnknownVal
	}
	return 0
}

func (x *RibEdmNnh) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RibEdmNnh) GetInterfaceIndex() uint32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

type RibEdmPathL2Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xcid        uint32 `protobuf:"varint,1,opt,name=xcid,proto3" json:"xcid,omitempty"`
	AcInterface string `protobuf:"bytes,2,opt,name=ac_interface,json=acInterface,proto3" json:"ac_interface,omitempty"`
}

func (x *RibEdmPathL2Info) Reset() {
	*x = RibEdmPathL2Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmPathL2Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmPathL2Info) ProtoMessage() {}

func (x *RibEdmPathL2Info) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmPathL2Info.ProtoReflect.Descriptor instead.
func (*RibEdmPathL2Info) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{6}
}

func (x *RibEdmPathL2Info) GetXcid() uint32 {
	if x != nil {
		return x.Xcid
	}
	return 0
}

func (x *RibEdmPathL2Info) GetAcInterface() string {
	if x != nil {
		return x.AcInterface
	}
	return ""
}

type RibEdmPathGroupingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupingId uint32 `protobuf:"varint,1,opt,name=grouping_id,json=groupingId,proto3" json:"grouping_id,omitempty"`
}

func (x *RibEdmPathGroupingInfo) Reset() {
	*x = RibEdmPathGroupingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmPathGroupingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmPathGroupingInfo) ProtoMessage() {}

func (x *RibEdmPathGroupingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmPathGroupingInfo.ProtoReflect.Descriptor instead.
func (*RibEdmPathGroupingInfo) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{7}
}

func (x *RibEdmPathGroupingInfo) GetGroupingId() uint32 {
	if x != nil {
		return x.GroupingId
	}
	return 0
}

type MgmtSrv6Sid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *MgmtSrv6Sid) Reset() {
	*x = MgmtSrv6Sid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtSrv6Sid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtSrv6Sid) ProtoMessage() {}

func (x *MgmtSrv6Sid) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtSrv6Sid.ProtoReflect.Descriptor instead.
func (*MgmtSrv6Sid) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{8}
}

func (x *MgmtSrv6Sid) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type MgmtSrv6HeadendBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MgmtSrv6HeadendBehavior) Reset() {
	*x = MgmtSrv6HeadendBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtSrv6HeadendBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtSrv6HeadendBehavior) ProtoMessage() {}

func (x *MgmtSrv6HeadendBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtSrv6HeadendBehavior.ProtoReflect.Descriptor instead.
func (*MgmtSrv6HeadendBehavior) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{9}
}

func (x *MgmtSrv6HeadendBehavior) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MgmtSrv6HeadendBehavior) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RibEdmViaSrv6Sid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid              string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	ResolutionLength uint32 `protobuf:"varint,2,opt,name=resolution_length,json=resolutionLength,proto3" json:"resolution_length,omitempty"`
}

func (x *RibEdmViaSrv6Sid) Reset() {
	*x = RibEdmViaSrv6Sid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmViaSrv6Sid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmViaSrv6Sid) ProtoMessage() {}

func (x *RibEdmViaSrv6Sid) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmViaSrv6Sid.ProtoReflect.Descriptor instead.
func (*RibEdmViaSrv6Sid) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{10}
}

func (x *RibEdmViaSrv6Sid) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RibEdmViaSrv6Sid) GetResolutionLength() uint32 {
	if x != nil {
		return x.ResolutionLength
	}
	return 0
}

type RibEdmPathSrv6Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfSRv6_Carriers  uint32                   `protobuf:"varint,1,opt,name=number_of_s_rv6__carriers,json=numberOfSRv6Carriers,proto3" json:"number_of_s_rv6__carriers,omitempty"`
	SRv6_CarrierFormat     *MgmtSrv6SidFmt          `protobuf:"bytes,2,opt,name=s_rv6__carrier_format,json=sRv6CarrierFormat,proto3" json:"s_rv6__carrier_format,omitempty"`
	SRv6_Carrier           []*MgmtSrv6Sid           `protobuf:"bytes,3,rep,name=s_rv6__carrier,json=sRv6Carrier,proto3" json:"s_rv6__carrier,omitempty"`
	HasSRv6HeadendBehavior bool                     `protobuf:"varint,4,opt,name=has_s_rv6_headend_behavior,json=hasSRv6HeadendBehavior,proto3" json:"has_s_rv6_headend_behavior,omitempty"`
	SRv6HeadendBehavior    *MgmtSrv6HeadendBehavior `protobuf:"bytes,5,opt,name=s_rv6_headend_behavior,json=sRv6HeadendBehavior,proto3" json:"s_rv6_headend_behavior,omitempty"`
	HasViaSRv6Sid          bool                     `protobuf:"varint,6,opt,name=has_via_s_rv6_sid,json=hasViaSRv6Sid,proto3" json:"has_via_s_rv6_sid,omitempty"`
	ViaSRv6Sid             *RibEdmViaSrv6Sid        `protobuf:"bytes,7,opt,name=via_s_rv6_sid,json=viaSRv6Sid,proto3" json:"via_s_rv6_sid,omitempty"`
}

func (x *RibEdmPathSrv6Info) Reset() {
	*x = RibEdmPathSrv6Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmPathSrv6Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmPathSrv6Info) ProtoMessage() {}

func (x *RibEdmPathSrv6Info) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmPathSrv6Info.ProtoReflect.Descriptor instead.
func (*RibEdmPathSrv6Info) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{11}
}

func (x *RibEdmPathSrv6Info) GetNumberOfSRv6_Carriers() uint32 {
	if x != nil {
		return x.NumberOfSRv6_Carriers
	}
	return 0
}

func (x *RibEdmPathSrv6Info) GetSRv6_CarrierFormat() *MgmtSrv6SidFmt {
	if x != nil {
		return x.SRv6_CarrierFormat
	}
	return nil
}

func (x *RibEdmPathSrv6Info) GetSRv6_Carrier() []*MgmtSrv6Sid {
	if x != nil {
		return x.SRv6_Carrier
	}
	return nil
}

func (x *RibEdmPathSrv6Info) GetHasSRv6HeadendBehavior() bool {
	if x != nil {
		return x.HasSRv6HeadendBehavior
	}
	return false
}

func (x *RibEdmPathSrv6Info) GetSRv6HeadendBehavior() *MgmtSrv6HeadendBehavior {
	if x != nil {
		return x.SRv6HeadendBehavior
	}
	return nil
}

func (x *RibEdmPathSrv6Info) GetHasViaSRv6Sid() bool {
	if x != nil {
		return x.HasViaSRv6Sid
	}
	return false
}

func (x *RibEdmPathSrv6Info) GetViaSRv6Sid() *RibEdmViaSrv6Sid {
	if x != nil {
		return x.ViaSRv6Sid
	}
	return nil
}

type Ipv4RibEdmPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address                      string                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	InformationSource            string                  `protobuf:"bytes,2,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	V6Nexthop                    string                  `protobuf:"bytes,3,opt,name=v6_nexthop,json=v6Nexthop,proto3" json:"v6_nexthop,omitempty"`
	V6InformationSource          string                  `protobuf:"bytes,4,opt,name=v6_information_source,json=v6InformationSource,proto3" json:"v6_information_source,omitempty"`
	InterfaceName                string                  `protobuf:"bytes,5,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Metric                       uint32                  `protobuf:"varint,6,opt,name=metric,proto3" json:"metric,omitempty"`
	LoadMetric                   uint32                  `protobuf:"varint,7,opt,name=load_metric,json=loadMetric,proto3" json:"load_metric,omitempty"`
	Flags64                      uint64                  `protobuf:"varint,8,opt,name=flags64,proto3" json:"flags64,omitempty"`
	Flags                        uint32                  `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
	PrivateFlags                 uint32                  `protobuf:"varint,10,opt,name=private_flags,json=privateFlags,proto3" json:"private_flags,omitempty"`
	MinimumRecurseLength         uint32                  `protobuf:"varint,11,opt,name=minimum_recurse_length,json=minimumRecurseLength,proto3" json:"minimum_recurse_length,omitempty"`
	Looped                       bool                    `protobuf:"varint,12,opt,name=looped,proto3" json:"looped,omitempty"`
	NextHopTableId               uint32                  `protobuf:"varint,13,opt,name=next_hop_table_id,json=nextHopTableId,proto3" json:"next_hop_table_id,omitempty"`
	NextHopVrfName               string                  `protobuf:"bytes,14,opt,name=next_hop_vrf_name,json=nextHopVrfName,proto3" json:"next_hop_vrf_name,omitempty"`
	NextHopTableName             string                  `protobuf:"bytes,15,opt,name=next_hop_table_name,json=nextHopTableName,proto3" json:"next_hop_table_name,omitempty"`
	NextHopAfi                   uint32                  `protobuf:"varint,16,opt,name=next_hop_afi,json=nextHopAfi,proto3" json:"next_hop_afi,omitempty"`
	NextHopSafi                  uint32                  `protobuf:"varint,17,opt,name=next_hop_safi,json=nextHopSafi,proto3" json:"next_hop_safi,omitempty"`
	RouteLabel                   uint32                  `protobuf:"varint,18,opt,name=route_label,json=routeLabel,proto3" json:"route_label,omitempty"`
	TunnelId                     uint32                  `protobuf:"varint,19,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Pathid                       uint32                  `protobuf:"varint,20,opt,name=pathid,proto3" json:"pathid,omitempty"`
	BackupPathid                 uint32                  `protobuf:"varint,21,opt,name=backup_pathid,json=backupPathid,proto3" json:"backup_pathid,omitempty"`
	RefCntOfBackup               uint32                  `protobuf:"varint,22,opt,name=ref_cnt_of_backup,json=refCntOfBackup,proto3" json:"ref_cnt_of_backup,omitempty"`
	NumberOfExtendedCommunities  uint32                  `protobuf:"varint,23,opt,name=number_of_extended_communities,json=numberOfExtendedCommunities,proto3" json:"number_of_extended_communities,omitempty"`
	MvpnPresent                  bool                    `protobuf:"varint,24,opt,name=mvpn_present,json=mvpnPresent,proto3" json:"mvpn_present,omitempty"`
	PathrtPresent                bool                    `protobuf:"varint,25,opt,name=pathrt_present,json=pathrtPresent,proto3" json:"pathrt_present,omitempty"`
	VrfimportrtPresent           bool                    `protobuf:"varint,26,opt,name=vrfimportrt_present,json=vrfimportrtPresent,proto3" json:"vrfimportrt_present,omitempty"`
	SourceasrtPresent            bool                    `protobuf:"varint,27,opt,name=sourceasrt_present,json=sourceasrtPresent,proto3" json:"sourceasrt_present,omitempty"`
	SourcerdPresent              bool                    `protobuf:"varint,28,opt,name=sourcerd_present,json=sourcerdPresent,proto3" json:"sourcerd_present,omitempty"`
	SegmentedNexthopPresent      bool                    `protobuf:"varint,29,opt,name=segmented_nexthop_present,json=segmentedNexthopPresent,proto3" json:"segmented_nexthop_present,omitempty"`
	NumberOfNnh                  uint32                  `protobuf:"varint,30,opt,name=number_of_nnh,json=numberOfNnh,proto3" json:"number_of_nnh,omitempty"`
	NextNextHop                  []*RibEdmNnh            `protobuf:"bytes,31,rep,name=next_next_hop,json=nextNextHop,proto3" json:"next_next_hop,omitempty"`
	NextHopId                    uint32                  `protobuf:"varint,32,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	NextHopIdRefcount            uint32                  `protobuf:"varint,33,opt,name=next_hop_id_refcount,json=nextHopIdRefcount,proto3" json:"next_hop_id_refcount,omitempty"`
	OspfAreaId                   string                  `protobuf:"bytes,34,opt,name=ospf_area_id,json=ospfAreaId,proto3" json:"ospf_area_id,omitempty"`
	RemoteBackupAddr             []string                `protobuf:"bytes,35,rep,name=remote_backup_addr,json=remoteBackupAddr,proto3" json:"remote_backup_addr,omitempty"`
	HasLabelstk                  bool                    `protobuf:"varint,36,opt,name=has_labelstk,json=hasLabelstk,proto3" json:"has_labelstk,omitempty"`
	NumLabels                    uint32                  `protobuf:"varint,37,opt,name=num_labels,json=numLabels,proto3" json:"num_labels,omitempty"`
	Labelstk                     []uint32                `protobuf:"varint,38,rep,packed,name=labelstk,proto3" json:"labelstk,omitempty"`
	BindingLabel                 uint32                  `protobuf:"varint,39,opt,name=binding_label,json=bindingLabel,proto3" json:"binding_label,omitempty"`
	NhidFeid                     uint64                  `protobuf:"varint,40,opt,name=nhid_feid,json=nhidFeid,proto3" json:"nhid_feid,omitempty"`
	MplsFeid                     uint64                  `protobuf:"varint,41,opt,name=mpls_feid,json=mplsFeid,proto3" json:"mpls_feid,omitempty"`
	HasVxlanNetworkId            bool                    `protobuf:"varint,42,opt,name=has_vxlan_network_id,json=hasVxlanNetworkId,proto3" json:"has_vxlan_network_id,omitempty"`
	VxlanNetworkId               uint32                  `protobuf:"varint,43,opt,name=vxlan_network_id,json=vxlanNetworkId,proto3" json:"vxlan_network_id,omitempty"`
	HasXcid                      bool                    `protobuf:"varint,44,opt,name=has_xcid,json=hasXcid,proto3" json:"has_xcid,omitempty"`
	Xcid                         uint32                  `protobuf:"varint,45,opt,name=xcid,proto3" json:"xcid,omitempty"`
	HasSpanDiagInterface         bool                    `protobuf:"varint,46,opt,name=has_span_diag_interface,json=hasSpanDiagInterface,proto3" json:"has_span_diag_interface,omitempty"`
	SpanDiagInterface            string                  `protobuf:"bytes,47,opt,name=span_diag_interface,json=spanDiagInterface,proto3" json:"span_diag_interface,omitempty"`
	HasSubscriberParentInterface bool                    `protobuf:"varint,48,opt,name=has_subscriber_parent_interface,json=hasSubscriberParentInterface,proto3" json:"has_subscriber_parent_interface,omitempty"`
	SubscriberParentInterface    string                  `protobuf:"bytes,49,opt,name=subscriber_parent_interface,json=subscriberParentInterface,proto3" json:"subscriber_parent_interface,omitempty"`
	InterfaceIndexPresent        bool                    `protobuf:"varint,50,opt,name=interface_index_present,json=interfaceIndexPresent,proto3" json:"interface_index_present,omitempty"`
	InterfaceIndexAttribute      uint32                  `protobuf:"varint,51,opt,name=interface_index_attribute,json=interfaceIndexAttribute,proto3" json:"interface_index_attribute,omitempty"`
	IidPresent                   bool                    `protobuf:"varint,52,opt,name=iid_present,json=iidPresent,proto3" json:"iid_present,omitempty"`
	Iid                          string                  `protobuf:"bytes,53,opt,name=iid,proto3" json:"iid,omitempty"`
	HasL2Info                    bool                    `protobuf:"varint,54,opt,name=has_l2_info,json=hasL2Info,proto3" json:"has_l2_info,omitempty"`
	L2Info                       *RibEdmPathL2Info       `protobuf:"bytes,55,opt,name=l2_info,json=l2Info,proto3" json:"l2_info,omitempty"`
	HasPathGroupingInfo          bool                    `protobuf:"varint,56,opt,name=has_path_grouping_info,json=hasPathGroupingInfo,proto3" json:"has_path_grouping_info,omitempty"`
	PathGroupingInfo             *RibEdmPathGroupingInfo `protobuf:"bytes,57,opt,name=path_grouping_info,json=pathGroupingInfo,proto3" json:"path_grouping_info,omitempty"`
	SRv6Info                     *RibEdmPathSrv6Info     `protobuf:"bytes,58,opt,name=s_rv6_info,json=sRv6Info,proto3" json:"s_rv6_info,omitempty"`
}

func (x *Ipv4RibEdmPathItem) Reset() {
	*x = Ipv4RibEdmPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4RibEdmPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4RibEdmPathItem) ProtoMessage() {}

func (x *Ipv4RibEdmPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4RibEdmPathItem.ProtoReflect.Descriptor instead.
func (*Ipv4RibEdmPathItem) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{12}
}

func (x *Ipv4RibEdmPathItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetInformationSource() string {
	if x != nil {
		return x.InformationSource
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetV6Nexthop() string {
	if x != nil {
		return x.V6Nexthop
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetV6InformationSource() string {
	if x != nil {
		return x.V6InformationSource
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetLoadMetric() uint32 {
	if x != nil {
		return x.LoadMetric
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetFlags64() uint64 {
	if x != nil {
		return x.Flags64
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetPrivateFlags() uint32 {
	if x != nil {
		return x.PrivateFlags
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetMinimumRecurseLength() uint32 {
	if x != nil {
		return x.MinimumRecurseLength
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetLooped() bool {
	if x != nil {
		return x.Looped
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetNextHopTableId() uint32 {
	if x != nil {
		return x.NextHopTableId
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetNextHopVrfName() string {
	if x != nil {
		return x.NextHopVrfName
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetNextHopTableName() string {
	if x != nil {
		return x.NextHopTableName
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetNextHopAfi() uint32 {
	if x != nil {
		return x.NextHopAfi
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetNextHopSafi() uint32 {
	if x != nil {
		return x.NextHopSafi
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetRouteLabel() uint32 {
	if x != nil {
		return x.RouteLabel
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetTunnelId() uint32 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetPathid() uint32 {
	if x != nil {
		return x.Pathid
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetBackupPathid() uint32 {
	if x != nil {
		return x.BackupPathid
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetRefCntOfBackup() uint32 {
	if x != nil {
		return x.RefCntOfBackup
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetNumberOfExtendedCommunities() uint32 {
	if x != nil {
		return x.NumberOfExtendedCommunities
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetMvpnPresent() bool {
	if x != nil {
		return x.MvpnPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetPathrtPresent() bool {
	if x != nil {
		return x.PathrtPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetVrfimportrtPresent() bool {
	if x != nil {
		return x.VrfimportrtPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetSourceasrtPresent() bool {
	if x != nil {
		return x.SourceasrtPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetSourcerdPresent() bool {
	if x != nil {
		return x.SourcerdPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetSegmentedNexthopPresent() bool {
	if x != nil {
		return x.SegmentedNexthopPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetNumberOfNnh() uint32 {
	if x != nil {
		return x.NumberOfNnh
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetNextNextHop() []*RibEdmNnh {
	if x != nil {
		return x.NextNextHop
	}
	return nil
}

func (x *Ipv4RibEdmPathItem) GetNextHopId() uint32 {
	if x != nil {
		return x.NextHopId
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetNextHopIdRefcount() uint32 {
	if x != nil {
		return x.NextHopIdRefcount
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetOspfAreaId() string {
	if x != nil {
		return x.OspfAreaId
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetRemoteBackupAddr() []string {
	if x != nil {
		return x.RemoteBackupAddr
	}
	return nil
}

func (x *Ipv4RibEdmPathItem) GetHasLabelstk() bool {
	if x != nil {
		return x.HasLabelstk
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetNumLabels() uint32 {
	if x != nil {
		return x.NumLabels
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetLabelstk() []uint32 {
	if x != nil {
		return x.Labelstk
	}
	return nil
}

func (x *Ipv4RibEdmPathItem) GetBindingLabel() uint32 {
	if x != nil {
		return x.BindingLabel
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetNhidFeid() uint64 {
	if x != nil {
		return x.NhidFeid
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetMplsFeid() uint64 {
	if x != nil {
		return x.MplsFeid
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetHasVxlanNetworkId() bool {
	if x != nil {
		return x.HasVxlanNetworkId
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetVxlanNetworkId() uint32 {
	if x != nil {
		return x.VxlanNetworkId
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetHasXcid() bool {
	if x != nil {
		return x.HasXcid
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetXcid() uint32 {
	if x != nil {
		return x.Xcid
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetHasSpanDiagInterface() bool {
	if x != nil {
		return x.HasSpanDiagInterface
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetSpanDiagInterface() string {
	if x != nil {
		return x.SpanDiagInterface
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetHasSubscriberParentInterface() bool {
	if x != nil {
		return x.HasSubscriberParentInterface
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetSubscriberParentInterface() string {
	if x != nil {
		return x.SubscriberParentInterface
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetInterfaceIndexPresent() bool {
	if x != nil {
		return x.InterfaceIndexPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetInterfaceIndexAttribute() uint32 {
	if x != nil {
		return x.InterfaceIndexAttribute
	}
	return 0
}

func (x *Ipv4RibEdmPathItem) GetIidPresent() bool {
	if x != nil {
		return x.IidPresent
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *Ipv4RibEdmPathItem) GetHasL2Info() bool {
	if x != nil {
		return x.HasL2Info
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetL2Info() *RibEdmPathL2Info {
	if x != nil {
		return x.L2Info
	}
	return nil
}

func (x *Ipv4RibEdmPathItem) GetHasPathGroupingInfo() bool {
	if x != nil {
		return x.HasPathGroupingInfo
	}
	return false
}

func (x *Ipv4RibEdmPathItem) GetPathGroupingInfo() *RibEdmPathGroupingInfo {
	if x != nil {
		return x.PathGroupingInfo
	}
	return nil
}

func (x *Ipv4RibEdmPathItem) GetSRv6Info() *RibEdmPathSrv6Info {
	if x != nil {
		return x.SRv6Info
	}
	return nil
}

type Ipv4RibEdmPathEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4RibEdmPath []*Ipv4RibEdmPathItem `protobuf:"bytes,1,rep,name=ipv4_rib_edm_path,json=ipv4RibEdmPath,proto3" json:"ipv4_rib_edm_path,omitempty"`
}

func (x *Ipv4RibEdmPathEntry) Reset() {
	*x = Ipv4RibEdmPathEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4RibEdmPathEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4RibEdmPathEntry) ProtoMessage() {}

func (x *Ipv4RibEdmPathEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4RibEdmPathEntry.ProtoReflect.Descriptor instead.
func (*Ipv4RibEdmPathEntry) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{13}
}

func (x *Ipv4RibEdmPathEntry) GetIpv4RibEdmPath() []*Ipv4RibEdmPathItem {
	if x != nil {
		return x.Ipv4RibEdmPath
	}
	return nil
}

type Ipv4RibEdmRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix                  string                `protobuf:"bytes,50,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength            uint32                `protobuf:"varint,51,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	RouteVersion            uint32                `protobuf:"varint,52,opt,name=route_version,json=routeVersion,proto3" json:"route_version,omitempty"`
	ProtocolId              uint32                `protobuf:"varint,53,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	ProtocolName            string                `protobuf:"bytes,54,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	Instance                string                `protobuf:"bytes,55,opt,name=instance,proto3" json:"instance,omitempty"`
	ClientId                uint32                `protobuf:"varint,56,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mirrored                bool                  `protobuf:"varint,57,opt,name=mirrored,proto3" json:"mirrored,omitempty"`
	RouteType               uint32                `protobuf:"varint,58,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	Priority                uint32                `protobuf:"varint,59,opt,name=priority,proto3" json:"priority,omitempty"`
	SvdType                 uint32                `protobuf:"varint,60,opt,name=svd_type,json=svdType,proto3" json:"svd_type,omitempty"`
	L2RouteType             uint32                `protobuf:"varint,61,opt,name=l2_route_type,json=l2RouteType,proto3" json:"l2_route_type,omitempty"`
	Flags                   uint32                `protobuf:"varint,62,opt,name=flags,proto3" json:"flags,omitempty"`
	ExtendedFlags           uint64                `protobuf:"varint,63,opt,name=extended_flags,json=extendedFlags,proto3" json:"extended_flags,omitempty"`
	Tag                     uint32                `protobuf:"varint,64,opt,name=tag,proto3" json:"tag,omitempty"`
	Distance                uint32                `protobuf:"varint,65,opt,name=distance,proto3" json:"distance,omitempty"`
	DiversionDistance       uint32                `protobuf:"varint,66,opt,name=diversion_distance,json=diversionDistance,proto3" json:"diversion_distance,omitempty"`
	Metric                  uint32                `protobuf:"varint,67,opt,name=metric,proto3" json:"metric,omitempty"`
	PathsCount              uint32                `protobuf:"varint,68,opt,name=paths_count,json=pathsCount,proto3" json:"paths_count,omitempty"`
	AttributeIdentity       uint32                `protobuf:"varint,69,opt,name=attribute_identity,json=attributeIdentity,proto3" json:"attribute_identity,omitempty"`
	TrafficIndex            uint32                `protobuf:"varint,70,opt,name=traffic_index,json=trafficIndex,proto3" json:"traffic_index,omitempty"`
	RoutePrecedence         uint32                `protobuf:"varint,71,opt,name=route_precedence,json=routePrecedence,proto3" json:"route_precedence,omitempty"`
	QosGroup                uint32                `protobuf:"varint,72,opt,name=qos_group,json=qosGroup,proto3" json:"qos_group,omitempty"`
	FlowTag                 uint32                `protobuf:"varint,73,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
	FwdClass                uint32                `protobuf:"varint,74,opt,name=fwd_class,json=fwdClass,proto3" json:"fwd_class,omitempty"`
	PicCount                uint32                `protobuf:"varint,75,opt,name=pic_count,json=picCount,proto3" json:"pic_count,omitempty"`
	Active                  bool                  `protobuf:"varint,76,opt,name=active,proto3" json:"active,omitempty"`
	Diversion               bool                  `protobuf:"varint,77,opt,name=diversion,proto3" json:"diversion,omitempty"`
	DiversionProtoName      string                `protobuf:"bytes,78,opt,name=diversion_proto_name,json=diversionProtoName,proto3" json:"diversion_proto_name,omitempty"`
	RouteAge                uint32                `protobuf:"varint,79,opt,name=route_age,json=routeAge,proto3" json:"route_age,omitempty"`
	RouteLabel              uint32                `protobuf:"varint,80,opt,name=route_label,json=routeLabel,proto3" json:"route_label,omitempty"`
	Version                 uint32                `protobuf:"varint,81,opt,name=version,proto3" json:"version,omitempty"`
	TblVersion              uint64                `protobuf:"varint,82,opt,name=tbl_version,json=tblVersion,proto3" json:"tbl_version,omitempty"`
	RouteModifyTime         uint64                `protobuf:"varint,83,opt,name=route_modify_time,json=routeModifyTime,proto3" json:"route_modify_time,omitempty"`
	PrefixFeid              uint64                `protobuf:"varint,84,opt,name=prefix_feid,json=prefixFeid,proto3" json:"prefix_feid,omitempty"`
	NumberOfAlgorithmLabels uint32                `protobuf:"varint,85,opt,name=number_of_algorithm_labels,json=numberOfAlgorithmLabels,proto3" json:"number_of_algorithm_labels,omitempty"`
	AlgorithmLabel          []*RibEdmAlgoLabelSet `protobuf:"bytes,86,rep,name=algorithm_label,json=algorithmLabel,proto3" json:"algorithm_label,omitempty"`
	SRv6Info                *RibEdmRouteSrv6Info  `protobuf:"bytes,87,opt,name=s_rv6_info,json=sRv6Info,proto3" json:"s_rv6_info,omitempty"`
	RoutePath               *Ipv4RibEdmPathEntry  `protobuf:"bytes,88,opt,name=route_path,json=routePath,proto3" json:"route_path,omitempty"`
}

func (x *Ipv4RibEdmRoute) Reset() {
	*x = Ipv4RibEdmRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4RibEdmRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4RibEdmRoute) ProtoMessage() {}

func (x *Ipv4RibEdmRoute) ProtoReflect() protoreflect.Message {
	mi := &file_ipv4_rib_edm_route_734_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4RibEdmRoute.ProtoReflect.Descriptor instead.
func (*Ipv4RibEdmRoute) Descriptor() ([]byte, []int) {
	return file_ipv4_rib_edm_route_734_proto_rawDescGZIP(), []int{14}
}

func (x *Ipv4RibEdmRoute) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ipv4RibEdmRoute) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetRouteVersion() uint32 {
	if x != nil {
		return x.RouteVersion
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetProtocolId() uint32 {
	if x != nil {
		return x.ProtocolId
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *Ipv4RibEdmRoute) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Ipv4RibEdmRoute) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetMirrored() bool {
	if x != nil {
		return x.Mirrored
	}
	return false
}

func (x *Ipv4RibEdmRoute) GetRouteType() uint32 {
	if x != nil {
		return x.RouteType
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetSvdType() uint32 {
	if x != nil {
		return x.SvdType
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetL2RouteType() uint32 {
	if x != nil {
		return x.L2RouteType
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetExtendedFlags() uint64 {
	if x != nil {
		return x.ExtendedFlags
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetDiversionDistance() uint32 {
	if x != nil {
		return x.DiversionDistance
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetPathsCount() uint32 {
	if x != nil {
		return x.PathsCount
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetAttributeIdentity() uint32 {
	if x != nil {
		return x.AttributeIdentity
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetTrafficIndex() uint32 {
	if x != nil {
		return x.TrafficIndex
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetRoutePrecedence() uint32 {
	if x != nil {
		return x.RoutePrecedence
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetQosGroup() uint32 {
	if x != nil {
		return x.QosGroup
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetFlowTag() uint32 {
	if x != nil {
		return x.FlowTag
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetFwdClass() uint32 {
	if x != nil {
		return x.FwdClass
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetPicCount() uint32 {
	if x != nil {
		return x.PicCount
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Ipv4RibEdmRoute) GetDiversion() bool {
	if x != nil {
		return x.Diversion
	}
	return false
}

func (x *Ipv4RibEdmRoute) GetDiversionProtoName() string {
	if x != nil {
		return x.DiversionProtoName
	}
	return ""
}

func (x *Ipv4RibEdmRoute) GetRouteAge() uint32 {
	if x != nil {
		return x.RouteAge
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetRouteLabel() uint32 {
	if x != nil {
		return x.RouteLabel
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetTblVersion() uint64 {
	if x != nil {
		return x.TblVersion
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetRouteModifyTime() uint64 {
	if x != nil {
		return x.RouteModifyTime
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetPrefixFeid() uint64 {
	if x != nil {
		return x.PrefixFeid
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetNumberOfAlgorithmLabels() uint32 {
	if x != nil {
		return x.NumberOfAlgorithmLabels
	}
	return 0
}

func (x *Ipv4RibEdmRoute) GetAlgorithmLabel() []*RibEdmAlgoLabelSet {
	if x != nil {
		return x.AlgorithmLabel
	}
	return nil
}

func (x *Ipv4RibEdmRoute) GetSRv6Info() *RibEdmRouteSrv6Info {
	if x != nil {
		return x.SRv6Info
	}
	return nil
}

func (x *Ipv4RibEdmRoute) GetRoutePath() *Ipv4RibEdmPathEntry {
	if x != nil {
		return x.RoutePath
	}
	return nil
}

var File_ipv4_rib_edm_route_734_proto protoreflect.FileDescriptor

var file_ipv4_rib_edm_route_734_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x37, 0x33, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69,
	0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61,
	0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x4b, 0x45, 0x59, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x69, 0x0a, 0x16,
	0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x53, 0x0a, 0x1b, 0x6d, 0x67, 0x6d, 0x74, 0x5f,
	0x73, 0x72, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x11,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x66, 0x6d,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x04, 0x0a, 0x17, 0x72, 0x69, 0x62, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x53, 0x52, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xcd,
	0x01, 0x0a, 0x17, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x95, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61,
	0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69,
	0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x14, 0x73, 0x52, 0x76, 0x36, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0xae,
	0x01, 0x0a, 0x0c, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e,
	0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f,
	0x66, 0x6d, 0x74, 0x52, 0x0a, 0x73, 0x52, 0x76, 0x36, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x52, 0x76,
	0x36, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x5f, 0x72, 0x76,
	0x36, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x52, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x6c, 0x67, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x6e, 0x6e, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a,
	0x14, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x32,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x78, 0x63, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x1a,
	0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0d, 0x6d,
	0x67, 0x6d, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x1a, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x14, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x76, 0x69,
	0x61, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xaa, 0x07, 0x0a, 0x16, 0x72, 0x69,
	0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x52, 0x76, 0x36, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0xbe, 0x01,
	0x0a, 0x15, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72,
	0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e,
	0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73,
	0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x66, 0x6d, 0x74, 0x52, 0x11, 0x73, 0x52, 0x76,
	0x36, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0xad,
	0x01, 0x0a, 0x0e, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66,
	0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69,
	0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69,
	0x64, 0x52, 0x0b, 0x73, 0x52, 0x76, 0x36, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x53, 0x52, 0x76, 0x36, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x6e, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0xca, 0x01, 0x0a, 0x16, 0x73,
	0x5f, 0x72, 0x76, 0x36, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66,
	0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73, 0x72, 0x76,
	0x36, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x13, 0x73, 0x52, 0x76, 0x36, 0x48, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x76,
	0x69, 0x61, 0x5f, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x56, 0x69, 0x61, 0x53, 0x52, 0x76, 0x36, 0x53, 0x69,
	0x64, 0x12, 0xb2, 0x01, 0x0a, 0x0d, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73,
	0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x76, 0x69,
	0x61, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x52, 0x0a, 0x76, 0x69, 0x61, 0x53,
	0x52, 0x76, 0x36, 0x53, 0x69, 0x64, 0x22, 0xc4, 0x16, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x36, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x70,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x61, 0x66, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x41, 0x66, 0x69, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x61, 0x66, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x74,
	0x68, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6e,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x43, 0x6e, 0x74, 0x4f, 0x66, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x76, 0x70, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x76,
	0x70, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74,
	0x68, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x13, 0x76, 0x72, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x76,
	0x72, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x73, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x73, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x72, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6e, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6e, 0x68, 0x12, 0xaa, 0x01, 0x0a, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61,
	0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6e, 0x6e, 0x68, 0x52, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49,
	0x64, 0x52, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x68, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6e, 0x68, 0x69, 0x64, 0x46, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x66, 0x65, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x70,
	0x6c, 0x73, 0x46, 0x65, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x78, 0x63, 0x69, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x58, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x78, 0x63, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x78, 0x63, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x61, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x69, 0x64, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x32, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4c,
	0x32, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xa8, 0x01, 0x0a, 0x07, 0x6c, 0x32, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66,
	0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69,
	0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x6c, 0x32, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x32, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x68, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xc3, 0x01, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66,
	0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x61, 0x74, 0x68, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xaf, 0x01, 0x0a, 0x0a,
	0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x90, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61,
	0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69,
	0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x72, 0x69, 0x62,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x52, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd8, 0x01,
	0x0a, 0x17, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xbc, 0x01, 0x0a, 0x11, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x90, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e,
	0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x52, 0x69,
	0x62, 0x45, 0x64, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x22, 0xde, 0x0d, 0x0a, 0x12, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x76, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x32, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x32, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x6f, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x77, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x77, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x62,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x62, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x66, 0x65, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x46, 0x65, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x90, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66,
	0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x72, 0x69, 0x62, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0xb0, 0x01, 0x0a, 0x0a, 0x73, 0x5f, 0x72, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66,
	0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69,
	0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x52, 0x76,
	0x36, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xb1, 0x01, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e,
	0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0e, 0x5a, 0x0c, 0x78, 0x72, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ipv4_rib_edm_route_734_proto_rawDescOnce sync.Once
	file_ipv4_rib_edm_route_734_proto_rawDescData = file_ipv4_rib_edm_route_734_proto_rawDesc
)

func file_ipv4_rib_edm_route_734_proto_rawDescGZIP() []byte {
	file_ipv4_rib_edm_route_734_proto_rawDescOnce.Do(func() {
		file_ipv4_rib_edm_route_734_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipv4_rib_edm_route_734_proto_rawDescData)
	})
	return file_ipv4_rib_edm_route_734_proto_rawDescData
}

var file_ipv4_rib_edm_route_734_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_ipv4_rib_edm_route_734_proto_goTypes = []interface{}{
	(*Ipv4RibEdmRoute_KEYS)(nil),     // 0: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_route_KEYS
	(*RibEdmAlgoLabelSet)(nil),       // 1: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_algo_label_set
	(*MgmtSrv6EndpointBehavior)(nil), // 2: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_endpoint_behavior
	(*MgmtSrv6SidFmt)(nil),           // 3: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_sid_fmt
	(*RibEdmRouteSrv6Info)(nil),      // 4: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_route_srv6_info
	(*RibEdmNnh)(nil),                // 5: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_nnh
	(*RibEdmPathL2Info)(nil),         // 6: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_l2_info
	(*RibEdmPathGroupingInfo)(nil),   // 7: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_grouping_info
	(*MgmtSrv6Sid)(nil),              // 8: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_sid
	(*MgmtSrv6HeadendBehavior)(nil),  // 9: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_headend_behavior
	(*RibEdmViaSrv6Sid)(nil),         // 10: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_via_srv6_sid
	(*RibEdmPathSrv6Info)(nil),       // 11: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_srv6_info
	(*Ipv4RibEdmPathItem)(nil),       // 12: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_item
	(*Ipv4RibEdmPathEntry)(nil),      // 13: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_entry
	(*Ipv4RibEdmRoute)(nil),          // 14: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_route
}
var file_ipv4_rib_edm_route_734_proto_depIdxs = []int32{
	2,  // 0: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_route_srv6_info.s_rv6_endpoint_behavior:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_endpoint_behavior
	3,  // 1: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_route_srv6_info.s_rv6_format:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_sid_fmt
	3,  // 2: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_srv6_info.s_rv6__carrier_format:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_sid_fmt
	8,  // 3: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_srv6_info.s_rv6__carrier:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_sid
	9,  // 4: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_srv6_info.s_rv6_headend_behavior:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.mgmt_srv6_headend_behavior
	10, // 5: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_srv6_info.via_s_rv6_sid:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_via_srv6_sid
	5,  // 6: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_item.next_next_hop:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_nnh
	6,  // 7: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_item.l2_info:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_l2_info
	7,  // 8: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_item.path_grouping_info:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_grouping_info
	11, // 9: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_item.s_rv6_info:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_path_srv6_info
	12, // 10: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_entry.ipv4_rib_edm_path:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_item
	1,  // 11: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_route.algorithm_label:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_algo_label_set
	4,  // 12: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_route.s_rv6_info:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.rib_edm_route_srv6_info
	13, // 13: cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_route.route_path:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.routes.route.ipv4_rib_edm_path_entry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ipv4_rib_edm_route_734_proto_init() }
func file_ipv4_rib_edm_route_734_proto_init() {
	if File_ipv4_rib_edm_route_734_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipv4_rib_edm_route_734_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4RibEdmRoute_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmAlgoLabelSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtSrv6EndpointBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtSrv6SidFmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmRouteSrv6Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmNnh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmPathL2Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmPathGroupingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtSrv6Sid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtSrv6HeadendBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmViaSrv6Sid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmPathSrv6Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4RibEdmPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4RibEdmPathEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipv4_rib_edm_route_734_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4RibEdmRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipv4_rib_edm_route_734_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ipv4_rib_edm_route_734_proto_goTypes,
		DependencyIndexes: file_ipv4_rib_edm_route_734_proto_depIdxs,
		MessageInfos:      file_ipv4_rib_edm_route_734_proto_msgTypes,
	}.Build()
	File_ipv4_rib_edm_route_734_proto = out.File
	file_ipv4_rib_edm_route_734_proto_rawDesc = nil
	file_ipv4_rib_edm_route_734_proto_goTypes = nil
	file_ipv4_rib_edm_route_734_proto_depIdxs = nil
}
